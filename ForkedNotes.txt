1. npm install on server, and client
2. install font awesome
3. install express and mysql
4. Add .env
5. install migrate
6. Need to create Table called "mvp" first
7. run mysql script in proj folder
8. create values for table "games". 
App will throw errors if no values in database
9. User Clicks roll from App.js, fetch req to GET games by id, and auto loads into
new page > GameView.js
10. CSS: text spills out of container for saved games, and buttons "Load Game"and "Delete"
need to be spaced evenly
11. Click on any of saved games, goes to quoteandchar/:id page. There are 2 buttons
"New Quote" and "New Character".
12. If click "New Quote", sent to quote_form to enter text and submit.
    Maybe indicate which player was selecter after "scallywag"
13. If user goes to New quote first, and tries to submit a new quote without adding new 
character first, Post gets 500 error. error from delay?
14. With pre-added data in mysql, select new game, added new game, post successful, need to refresh games page to see added game
15. Load saved game, select new quote, New Quote will post 500 status error if string contains apostraphe
16. Create new character works 
17. Add home button to quote and character page


CSS Change:
    Background:
    https://wallpaperaccess.com/pixel-forest

    Div containers

    Shadows to text

    Re-aligned buttons

    Hover highlight on Roll

    Select Character Avatars - Need to add onClick

    Updated form to include avatar icon, also in  QuoteAndChar.js file,
    Added "charIcon" onto "characters" table in "mvp" DB
    
    Created new file: 
        AvatarList.js with preloaded imported images from folder "ClientImages".
            This list is used to map the characters on CharForm.js

    UESR Accounts:
        Created new table users:

        mysql> desc users;
    +-----------+--------------+------+-----+---------+----------------+
    | Field     | Type         | Null | Key | Default | Extra          |
    +-----------+--------------+------+-----+---------+----------------+
    | id        | int          | NO   | PRI | NULL    | auto_increment |
    | firstname | varchar(20)  | NO   |     | NULL    |                |
    | lastname  | varchar(20)  | NO   |     | NULL    |                |
    | username  | varchar(20)  | NO   |     | NULL    |                |
    | password  | varchar(300) | NO   |     | NULL    |                |
    | email     | varchar(20)  | NO   |     | NULL    |                |
    | games_id  | int          | NO   | MUL | NULL    |                |
    +-----------+--------------+------+-----+---------+----------------+
    7 rows in set (0.00 sec)

    Created new server file in routes: 
        userAccounts.js

    Created new sql file in model: 
        usersTables.sql

    Created new folder in client components folder:
        LoginReg 

            Added new files for this folder:
                ForgotPW.js
                LoggedInView.js
                Registration.js
                TestData.js => sensitive date, added to gitignore 


    Authentication - Client side
        bcrypt install for hashing
        https://github.com/kelektiv/node.bcrypt.js#readme
        npm install bcrypt
        

    Authorization -Server side
        JWT install is for token 
        https://github.com/auth0/node-jsonwebtoken#readme
            npm install jsonwebtoken


    Updated README.md for Avatar terms of use by creator

    Added register user, and Login, bcrypt config (added to gitignore) route into userAccounts.js in server routes folder

    Added middleware folder for guards.js file needed to be used in server side routes folder
        for games.js in order for password hashing

    Client side: 
        Removed LoginForm from App.js, and replaced with LoginRegView instead for protoyping
        Added in components folder, new folder LoginReg to keep all components for authentication and authorization for easier integration
        Added helpers folder inside LoginReg Folder > Api.js, Local.js
        In LoginReg folder, created: AuthenticatedUser, ErrorView, LoginRegView, MembersOnly, Navbar, and Profile View.
        